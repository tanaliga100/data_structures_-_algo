 STACKS
= last in first out (LIFO)
= the last element that is inserted is the first element to be removed 
= abstract data type
= supports to main operations || push && pop or add && remove
= usage are :
=  brower history tracking
=  undo operation when typing
=  expression conversions
=  call stack in JS runtime
= push(element) = add an element to the top of the stack
= pop(element) = remove an element from the top of the stack
= peek(element) = see the element from the top of the stack || without removing
= isEmpty(element) = check if the stack is empty
= size(element) = check the number of elements in the stack
= print(element) = visualize the elements in the stack


 QUEUE
= sequential collections of elements
= follow the FIFO principles
= the first element that is inserted is the first element to be removed 
= abstract data types
= supports to main operations || enqueue && dequeue
= enqueue adds an element to the tail/rear of the collection
= dequeue removes an element from the head/front of the collection
= usage are : callback || js runtime

LINKED LIST 
= consist of linear data structures includes serries of connected nodes
= has a pointer that connects tot he next nodemon
= can be easily inserted or removed
= random of access of elements is not feasible
= Insertion > add at the beginning || or at the given index in the LIST
= Deletion > remove an item in a given index
= Search > find an element given its values
= A real world application of  STACKS || QUEUES


DOUBLY LINKED LIST
= each node contains a value field || the next node link || the previous node link
= [insertion and removing] = both ends possible in constant time complexity but with at the expense of     more space;


HASH TABLE
= also known as hash map;
= used to store key-value pairs;
= it is a special implementation of Js's Objects;
= using index to store the value;
= hashing fn acccepts the string key, converts it into a hash code using a defined logic and then maps it 
  into a numeric index that is within the bounds of the array;
= has three main operations: SET a store to a key-value pair
                             GET to retrieve a value given its key
                             REMOVE to delete a key-value pair
